#include "gtest/gtest.h"
#include "SinusoidalOscillator.h"
#include <iostream>

using namespace hormodular;


class SinusoidalOscillatorTest : public testing::Test
{
    public:
        static const float sineReference[200];
        static const float AMPLITUDE = 30;
        static const float OFFSET = 60;
        static const int PERIOD = 3000;
        static const float PHASE = 90;

        static const int STEP = PERIOD / 200;

       Oscillator* oscillator;

       virtual void SetUp()
       {
           //-- Create a sinusoidal oscillator with the test parameters
           oscillator = new SinusoidalOscillator( AMPLITUDE, OFFSET, PHASE, PERIOD);
       }

       virtual void TearDown()
       {
           delete oscillator;
           oscillator = NULL;
       }
};

const float SinusoidalOscillatorTest::sineReference[200] = { 90,89.98519681097196,89.94080185284815,89.86685893809241,89.76344103943434,89.63065021785414,89.46861752186066,89.27750285816242,89.05749483385894,88.8088105703083,88.53169548885461,88.22642306862676,87.89329457664755,87.53263877051944,87.14481157398058,86.73019572565104,86.28920040131591,85.82226081011831,85.32983776506046,84.81241722823685,84.27050983124843,83.70465037127072,83.11539728327368,82.50333208891379,81.86905882264234,81.21320343559643,80.53641317786067,79.83935595970955,79.12271969246069,78.38721160958929,77.63355756877419,76.86250133556392,76.07480384936991,75.27124247251113,74.45261022305145,73.6197149921864,72.77337874695219,71.91443671904342,71.04373658054033,70.16213760735874,69.27050983124843,68.36973318117688,67.46069661494565,66.54429724189627,65.62143943757174,64.69303395120693,63.75999700692914,62.82324939955544,61.8837155858794,60.94232277234384,60,59.05767722765616,58.11628441412061,57.17675060044458,56.24000299307087,55.30696604879307,54.37856056242828,53.45570275810373,52.53930338505435,51.63026681882312,50.72949016875158,49.83786239264127,48.95626341945967,48.08556328095659,47.22662125304782,46.3802850078136,45.54738977694853,44.72875752748887,43.92519615063011,43.13749866443608,42.36644243122581,41.61278839041071,40.87728030753931,40.16064404029045,39.46358682213933,38.78679656440357,38.13094117735766,37.49666791108622,36.88460271672632,36.29534962872928,35.72949016875158,35.18758277176315,34.67016223493955,34.17773918988171,33.71079959868409,33.26980427434897,32.85518842601941,32.46736122948056,32.10670542335245,31.77357693137323,31.46830451114539,31.19118942969171,30.94250516614107,30.72249714183758,30.53138247813934,30.36934978214587,30.23655896056566,30.1331410619076,30.05919814715185,30.01480318902805,30,30.01480318902805,30.05919814715185,30.1331410619076,30.23655896056566,30.36934978214587,30.53138247813934,30.72249714183758,30.94250516614107,31.1911894296917,31.46830451114539,31.77357693137323,32.10670542335245,32.46736122948056,32.85518842601941,33.26980427434896,33.7107995986841,34.17773918988168,34.67016223493955,35.18758277176315,35.72949016875157,36.29534962872928,36.88460271672631,37.49666791108622,38.13094117735764,38.78679656440357,39.46358682213933,40.16064404029045,40.87728030753929,41.61278839041071,42.36644243122581,43.13749866443607,43.92519615063011,44.72875752748884,45.54738977694853,46.3802850078136,47.22662125304781,48.08556328095656,48.95626341945966,49.83786239264126,50.72949016875157,51.63026681882312,52.53930338505434,53.45570275810373,54.37856056242826,55.30696604879307,56.24000299307086,57.17675060044455,58.1162844141206,59.05767722765614,59.99999999999999,60.94232277234384,61.88371558587941,62.82324939955541,63.75999700692913,64.69303395120691,65.62143943757172,66.54429724189626,67.46069661494565,68.36973318117687,69.27050983124842,70.16213760735873,71.04373658054033,71.91443671904342,72.77337874695218,73.6197149921864,74.45261022305145,75.27124247251112,76.0748038493699,76.86250133556391,77.63355756877419,78.38721160958929,79.12271969246069,79.83935595970954,80.53641317786065,81.21320343559643,81.86905882264233,82.50333208891379,83.11539728327368,83.70465037127069,84.27050983124843,84.81241722823685,85.32983776506045,85.82226081011829,86.28920040131591,86.73019572565103,87.14481157398058,87.53263877051943,87.89329457664755,88.22642306862676,88.53169548885461,88.8088105703083,89.05749483385894,89.27750285816242,89.46861752186065,89.63065021785413,89.76344103943433,89.86685893809241,89.94080185284815,89.98519681097196};


TEST_F( SinusoidalOscillatorTest, createdSinusoidalOscillatorExists)
{
    EXPECT_TRUE( oscillator != NULL);
}

TEST_F(SinusoidalOscillatorTest, oscillatorParametersAreSetCorrectly)
{
    EXPECT_FLOAT_EQ(AMPLITUDE, oscillator->getAmplitude());
    EXPECT_FLOAT_EQ(OFFSET, oscillator->getOffset());
    EXPECT_FLOAT_EQ(PERIOD, oscillator->getPeriod());
    EXPECT_FLOAT_EQ(PHASE, oscillator->getPhase());
}

TEST_F(SinusoidalOscillatorTest, oscillatesCorrectly)
{
    unsigned long currentTime = 0;

    for (int i = 0; i < 200; i++)
    {
        EXPECT_FLOAT_EQ( sineReference[i], oscillator->calculatePos(currentTime*1000));
        currentTime += STEP;
    }
}
